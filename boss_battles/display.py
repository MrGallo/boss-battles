import curses


FONT5x7 = {
    'A': [0x1F, 0x24, 0x44, 0x24, 0x1F],
    'B': [0x7F, 0x49, 0x49, 0x49, 0x36],
    'C': [0x3E, 0x41, 0x41, 0x41, 0x22],
    'D': [0x7F, 0x41, 0x42, 0x24, 0x18],
    'E': [0x7F, 0x49, 0x49, 0x49, 0x41],
    'F': [0x7F, 0x48, 0x48, 0x48, 0x40],
    'G': [0x3E, 0x41, 0x41, 0x45, 0x26],
    'H': [0x7F, 0x08, 0x08, 0x08, 0x7F],
    'I': [0x41, 0x41, 0x7F, 0x41, 0x41],
    'J': [0x42, 0x41, 0x41, 0x41, 0x7E],
    'K': [0x7F, 0x08, 0x14, 0x22, 0x41],
    'L': [0x7F, 0x01, 0x01, 0x01, 0x01],
    'M': [0x7F, 0x10, 0x08, 0x10, 0x7F],
    'N': [0x7F, 0x10, 0x08, 0x04, 0x7F],
    'O': [0x3E, 0x41, 0x41, 0x41, 0x3E],
    'P': [0x7F, 0x48, 0x48, 0x48, 0x30],
    'Q': [0x3E, 0x41, 0x45, 0x42, 0x3D],
    'R': [0x7F, 0x48, 0x4C, 0x4A, 0x31],
    'S': [0x31, 0x49, 0x49, 0x49, 0x46],
    'T': [0x40, 0x40, 0x7F, 0x40, 0x40],
    'U': [0x7E, 0x01, 0x01, 0x01, 0x7E],
    'V': [0x78, 0x04, 0x03, 0x04, 0x78],
    'W': [0x7F, 0x02, 0x0C, 0x02, 0x7F],
    'X': [0x63, 0x14, 0x08, 0x14, 0x63],
    'Y': [0x70, 0x08, 0x07, 0x08, 0x70],
    'Z': [0x43, 0x45, 0x49, 0x51, 0x61],
    '0': [0x3E, 0x45, 0x49, 0x51, 0x3E],
    '1': [0x00, 0x42, 0x7F, 0x40, 0x00],
    '2': [0x62, 0x51, 0x49, 0x49, 0x46],
    '3': [0x22, 0x41, 0x49, 0x49, 0x36],
    '4': [0x18, 0x14, 0x12, 0x7F, 0x10],
    '5': [0x4F, 0x49, 0x49, 0x49, 0x31],
    '6': [0x3E, 0x49, 0x49, 0x49, 0x32],
    '7': [0x01, 0x01, 0x71, 0x0D, 0x03],
    '8': [0x36, 0x49, 0x49, 0x49, 0x36],
    '9': [0x26, 0x49, 0x49, 0x49, 0x3E],
    '.': [0x00, 0x00, 0x01, 0x00, 0x00],
    ',': [0x00, 0x05, 0x06, 0x05, 0x00],
}



def draw_char(screen, x, y, char):
    hex_columns = FONT5x7.get(char.upper())
    if not hex_columns:
        return  # Character not found in font

    for col_index, col_value in enumerate(hex_columns):
        for row_index in range(7):
            pixel_on = (col_value >> row_index) & 0x01
            if pixel_on:
                try:
                    screen.addch(y + (6 - row_index), x + col_index, 'â–ˆ')  # Use '#' or any character for the pixel
                except curses.error:
                    curses.start_color()
                    curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_RED)  # Color pair 1: White text, Red background   
                    screen.addstr(0, 0, "Error: Text outside of screen", curses.color_pair(1))
                    pass

def calc_text_width(text, font_size: tuple[int, int] = (5, 7)):
    """
    Calculate the total width of the given text on the screen, 
    factoring in character spacing and font size.

    Args:
        screen: The curses screen object.
        text (str): The text string to calculate the width for.
        font_size (tuple[int, int]): (width, height) of a single character.

    Returns:
        int: The calculated width of the text on the screen.
    """
    char_width, _ = font_size  # We only care about the width for this calculation
    num_chars = len(text)
    
    # Calculate total width: (width of each character + 1 space) * num_chars - 1 (no space after the last character)
    total_width = num_chars * char_width + (num_chars - 1)

    return total_width


def draw_text(screen, x, y, text, align: str = "left"):
    if align == "center":
        _, width = screen.getmaxyx()
        text_width = calc_text_width(text)
        x = (width - text_width) // 2

    for i, char in enumerate(text):
        x_offset = i * 6
        draw_char(screen, x + x_offset, y, char)